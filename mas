Master
tarting services locally with docker-compose
In order to start entire infrastructure using Docker, you have to build images by executing bash ./mvnw clean install -P buildDocker  This requires Docker or Docker desktop to be installed and running.

Alternatively you can also build all the images on Podman, which requires Podman or Podman Desktop to be installed and running.

./mvnw clean install -PbuildDocker -Dcontainer.executable=podman
By default, the Docker OCI image is build for an linux/amd64 platform. For other architectures, you could change it by using the -Dcontainer.platform maven command line argument. For instance, if you target container images for an Apple M2, you could use the command line with the linux/arm64 architecture:

./mvnw clean install -P buildDocker -Dcontainer.platform="linux/arm64"
Once images are ready, you can start them with a single command docker compose up or podman-compose up.

Containers startup order is coordinated with the service_healthy condition of the Docker Compose depends-on expression and the healthcheck of the service containers. After starting services, it takes a while for API Gateway to be in sync with service registry, so don't be scared of initial Spring Cloud Gateway timeouts. You can track services availability using Eureka dashboard available by default at http://localhost:8761.

The main branch uses an Eclipse Temurin with Java 17 as Docker base image.

NOTE: Under MacOSX or Windows, make sure that the Docker VM has enough memory to run the microservices. The default settings are usually not enough and make the docker-compose up painfully slow.

Starting services locally with docker-compose and Java
If you experience issues with running the system via docker-compose you can try running the ./scripts/run_all.sh script that will start the infrastructure services via docker-compose and all the Java based applications via standard nohup java -jar ... command. The logs will be available under ${ROOT}/target/nameoftheapp.log.

Each of the java based applications is started with the chaos-monkey profile in order to interact with Spring Boot Chaos Monkey. You can check out the (README)[scripts/chaos/README.md] for more information about how to use the ./scripts/chaos/call_chaos.sh helper script to enable assaults.

Understanding the Spring Petclinic application
See the presentation of the Spring Petclinic Framework version

A blog post introducing the Spring Petclinic Microsevices (french language)

You can then access petclinic here: http://localhost:8080/
